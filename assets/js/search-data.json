{
  
    
        "post0": {
            "title": "표준화",
            "content": "각 개체들이 평균을 기준으로 얼마나 떨어져 있는지를 나타내는 값으로 변환하는 과정 | . Z-Score 표준화는 각 요소의 값에서 평균을 뺀 후 표준편차로 나누어 수행 | . 변환 후 데이터의 평균은 0, 표준편차는 1의 값을 갖게 된다. | . R&#49892;&#49845; . scale center : TRUE이면 데이터에서 해당벡터의 평균을 뺌 | scale : center = T, scale = T 이면 데이터를 해당 벡터의 표준편차로 나눔 | center = F, scale = T 이면 데이터를 해당 벡터의 제곱평균제곱근으로 나눔 | scale = F 이면 데이터를 어떤 값으로도 나누지 않음 | . | . | . mtcars 데이터의 mpg, hp 변수로만 이루어진 데이터프레임을 생성하고 각 변수를 표준화한 새로운 변수를 추가해보자. | . library(tidyverse) . test &lt;- mtcars %&gt;% select(mpg,hp) . test %&gt;% transmute_at(vars(mpg,hp),scale) %&gt;% head() ##scale(test$mpg, center=T,scale=T) 안되면 걍이런식으로 노가다 붙이자 . A data.frame: 6 × 2 mpghp . &lt;dbl[,1]&gt;&lt;dbl[,1]&gt; . Mazda RX4 0.1508848 | -0.5350928 | . Mazda RX4 Wag 0.1508848 | -0.5350928 | . Datsun 710 0.4495434 | -0.7830405 | . Hornet 4 Drive 0.2172534 | -0.5350928 | . Hornet Sportabout-0.2307345 | 0.4129422 | . Valiant-0.3302874 | -0.6080186 | . &#51221;&#44508;&#54868; . 정규화란 데이터의 범위를 0과 1사이로 변환하여 데이터의 분포를 조정하는 방법 | . 특정 개체가 가지는 위치를 파악하고 비교할 때 유용하게 사용할 수 있다. | . R&#49892;&#49845; . 사용자 정의함수 생성 | . normal &lt;- function(x) { return ((x- min(x)) / (max(x)-min(x))) } . iris2 &lt;- iris %&gt;% transmute_at(vars(-Species),normal) . head(iris); head(iris2) . A data.frame: 6 × 5 Sepal.LengthSepal.WidthPetal.LengthPetal.WidthSpecies . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;fct&gt; . 15.1 | 3.5 | 1.4 | 0.2 | setosa | . 24.9 | 3.0 | 1.4 | 0.2 | setosa | . 34.7 | 3.2 | 1.3 | 0.2 | setosa | . 44.6 | 3.1 | 1.5 | 0.2 | setosa | . 55.0 | 3.6 | 1.4 | 0.2 | setosa | . 65.4 | 3.9 | 1.7 | 0.4 | setosa | . A data.frame: 6 × 4 Sepal.LengthSepal.WidthPetal.LengthPetal.Width . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 10.22222222 | 0.6250000 | 0.06779661 | 0.04166667 | . 20.16666667 | 0.4166667 | 0.06779661 | 0.04166667 | . 30.11111111 | 0.5000000 | 0.05084746 | 0.04166667 | . 40.08333333 | 0.4583333 | 0.08474576 | 0.04166667 | . 50.19444444 | 0.6666667 | 0.06779661 | 0.04166667 | . 60.30555556 | 0.7916667 | 0.11864407 | 0.12500000 | .",
            "url": "https://gangcheol.github.io/data-mining/python/2022/05/24/%ED%91%9C%EC%A4%80%ED%99%94%EC%99%80-%EC%A0%95%EA%B7%9C%ED%99%94(1205).html",
            "relUrl": "/python/2022/05/24/%ED%91%9C%EC%A4%80%ED%99%94%EC%99%80-%EC%A0%95%EA%B7%9C%ED%99%94(1205).html",
            "date": " • May 24, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "현재 날짜와 시간을 파악해보기",
            "content": "&quot;ADP&quot; . toc:true- branch: master | badges: true | comments: true | author: 이강철 | categories: [python] | hide :false | published: true | . today &lt;- Sys.Date() today . 2021-12-05 class(today) . &#39;Date&#39; time &lt;- Sys.time() time . [1] &#34;2021-12-05 14:46:38 KST&#34; . class(time) . &lt;ol class=list-inline&gt;&#39;POSIXct&#39; | &#39;POSIXt&#39; | &lt;/ol&gt; 각각의 형식을 보면 생성된 객체들의 특성을 파악할 수 있다. | . unclass() . unclass()는 데이터의 클래스 속성을 제거해주는 기능을 함 | . unclass 함수를 이용해 today, time 의 내부적으로 저장하고 있는 값을 확인해보자. | . unclass(today) . 18966 today : 1970년 1월 1일 이후로 경과한 일 수를 의미함. | . unclass(time) . 1638683198.04487 1970년 1월 1일 00:00:00 이후로 경과한 초 수를 의미함. | . as.POSIXct(unclass(time),origin=&quot;1970-01-01&quot;) . [1] &#34;2021-12-05 14:46:38 KST&#34; . unclass(time)은 1970년 1월 1일 이후로 경과한 초 수를 의미하므로, origin 인자 값으로 1970-01-01을 지정 | . Sys.time &#54632;&#49688;&#47484; &#51060;&#50857;&#54616;&#50668; &#54788;&#51116; &#49884;&#44036;&#51012; &#44396;&#54616;&#44256; &#51060;&#47492; time &#48320;&#49688;&#50640; &#51200;&#51109; &#54980;, time&#51012; POSIXlt &#54805;&#49885;&#51004;&#47196; &#48320;&#54872; &#46244; &#49884;&#44036;&#51221;&#48372; &#52628;&#52636; . POSIXlt : 연도, 월, 일, 시, 분, 초를 포함하는 9개의 정보를 리스트에 저장 | . time &lt;- as.POSIXlt(Sys.time()) . year에는 1900년 이후의 경과년도수가 저장되어있음 | . time$year+1900 . 2021 month : 월 정보는 0-11값으로 저장되어 있기 때문에 1을 더함 | . time$mon+1 . 12 mday : 1-31 일 | . time$mday . 5 wday : 0-6 -&gt; 요일을 나타내며, 0은 일요일 | . time$wday . 0 그 밖에 sec, min, hour 이 있음 | . &#45216;&#51676; &#54364;&#49884;&#54805;&#49885; &#48320;&#44221; . now &lt;- Sys.time() . class(now) . &lt;ol class=list-inline&gt;&#39;POSIXct&#39; | &#39;POSIXt&#39; | &lt;/ol&gt; %u : 요일로 1-7을 나타냄 1은 월요일 | . format(now, &quot;%y-%m-%d %H:%M:%S:%u&quot;) . &#39;21-12-05 15:04:22:7&#39; class(format(now, &quot;%y-%m-%d %H:%M:%S:%u&quot;) ) . &#39;character&#39; &quot;20200101&quot; 이라는 문자열을 Date 형식으로 변경 후, date 변수에 저장하여 class를 확인해보자. | . date &lt;- as.Date(&quot;20200101&quot;,format = &quot;%Y%m%d&quot;) . class(date) . &#39;Date&#39; &#45216;&#51676; &#45936;&#51060;&#53552;&#51032; &#50672;&#49328; . &#54788;&#51116; &#45216;&#51088;&#47196;&#48512;&#53552; 100&#51068; &#54980;&#51032; &#45216;&#51676; &#44396;&#54616;&#44592; . Sys.Date() + 100 . 2022-03-15 &quot;2020-01-01&quot;&#47196; &#54364;&#54788;&#46108; &#45936;&#51060;&#53552;&#47196;&#48512;&#53552; 365&#51068; &#54980; &#51032; &#45216;&#51676; &#44396;&#54616;&#44592; . as.Date(&quot;2020-01-01&quot;,format=&quot;%Y-%m-%d&quot;) + 365 . 2020-12-31 &quot;1990-01-01&quot;&#44284; &quot;2025-01-01&quot; &#49324;&#51060;&#51032; &#51068; &#49688; &#44396;&#54616;&#44592; . as.Date(&quot;2025-01-01&quot;)-as.Date(&quot;1990-01-01&quot;) . Time difference of 12784 days . &#44396;&#54620; &#51068;&#49688;&#47564; &#50508;&#44256;&#49910;&#45796;&#47732;? . as.numeric(as.Date(&quot;2025-01-01&quot;)-as.Date(&quot;1990-01-01&quot;)) . 12784 difftime(&quot;2025-01-01&quot;,&quot;1990-01-01&quot;) . Time difference of 12784 days . &#49884;&#44036; &#52264;&#51060;&#47484; &#44396;&#54624; &#44221;&#50864;? . as.difftime(&quot;09:40:00&quot;)-as.difftime(&quot;18:30:00&quot;) . Time difference of -8.833333 hours .",
            "url": "https://gangcheol.github.io/data-mining/2022/05/24/%EB%82%A0%EC%A7%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EC%B2%98%EB%A6%AC.html",
            "relUrl": "/2022/05/24/%EB%82%A0%EC%A7%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EC%B2%98%EB%A6%AC.html",
            "date": " • May 24, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "결측치",
            "content": "&quot;ADP&quot; . toc:true- branch: master | badges: true | comments: true | author: 이강철 | categories: [python] | hide :false | published: true | . is.na(x) : 벡터에서 결측가 있는 경우 True를 반환 | . complete.cases(x) : 해당 데이터프레임에서 어떤 객체가 가지는 변수 중에 한 개라도 NA가 있을 경우 False 를 뱉음 | . R&#49892;&#49845; . Ozone 변수에 존재하는 na의 개수 산출 | . sum(is.na(airquality$Ozone)) . 37 table(is.na(airquality$Ozone)) . FALSE TRUE 116 37 . apply함수를 이용하여 각 변수의 na값이 몇 개가 있는지 확인 | . apply(airquality,2,function(x) sum(is.na(x))) . &lt;dl class=dl-inline&gt;Ozone37Solar.R7Wind0Temp0Month0Day0&lt;/dl&gt; complete.case 함수를 이용하여 airquality 데이터에서 na값이 하나라도 존재하는 행들을 air_na 변수에 저장하고, na값을 하나도 가지지 않는 행들을 air_com 변수에 저장하기. | . air_na &lt;- airquality[!complete.cases(airquality),] . head(air_na) . A data.frame: 6 × 6 OzoneSolar.RWindTempMonthDay . &lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt; . 5NA | NA | 14.3 | 56 | 5 | 5 | . 628 | NA | 14.9 | 66 | 5 | 6 | . 10NA | 194 | 8.6 | 69 | 5 | 10 | . 11 7 | NA | 6.9 | 74 | 5 | 11 | . 25NA | 66 | 16.6 | 57 | 5 | 25 | . 26NA | 266 | 14.9 | 58 | 5 | 26 | . air_com &lt;- airquality[complete.cases(airquality),] . head(air_com) . A data.frame: 6 × 6 OzoneSolar.RWindTempMonthDay . &lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt; . 141 | 190 | 7.4 | 67 | 5 | 1 | . 236 | 118 | 8.0 | 72 | 5 | 2 | . 312 | 149 | 12.6 | 74 | 5 | 3 | . 418 | 313 | 11.5 | 62 | 5 | 4 | . 723 | 299 | 8.6 | 65 | 5 | 7 | . 819 | 99 | 13.8 | 59 | 5 | 8 | . &#44208;&#52769;&#52824; &#45824;&#52824;&#48277; . completes analysis : 결측값이 존재하는 행을 삭제 | . 평균, 중앙값, 최빈값, nearest neighbor 방법 등이 있음 | . R &#49892;&#49845; . airquality의 Ozone 변수 값이 존재하지 않는 경우, 해당 변수를 평균값으로 대체하자. | . airquality$Ozone[is.na(airquality$Ozone)] &lt;- mean(airquality$Ozone, na.rm=T) . sum(is.na(airquality$Ozone)) . 0 DMwR &#54056;&#53412;&#51648; . library(DMwR2) . air_before &lt;- airquality . air_after &lt;- centralImputation(airquality) ## 결측치를 중앙값으로 대치 . na_indx &lt;- which(!complete.cases(airquality)) ## Na인덱스를 추출 . head(air_before[na_indx,]) . A data.frame: 6 × 6 OzoneSolar.RWindTempMonthDay . &lt;dbl&gt;&lt;int&gt;&lt;dbl&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt; . 542.12931 | NA | 14.3 | 56 | 5 | 5 | . 628.00000 | NA | 14.9 | 66 | 5 | 6 | . 11 7.00000 | NA | 6.9 | 74 | 5 | 11 | . 2742.12931 | NA | 8.0 | 57 | 5 | 27 | . 9678.00000 | NA | 6.9 | 86 | 8 | 4 | . 9735.00000 | NA | 7.4 | 85 | 8 | 5 | . head(air_after) . A data.frame: 6 × 6 OzoneSolar.RWindTempMonthDay . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt; . 141.00000 | 190 | 7.4 | 67 | 5 | 1 | . 236.00000 | 118 | 8.0 | 72 | 5 | 2 | . 312.00000 | 149 | 12.6 | 74 | 5 | 3 | . 418.00000 | 313 | 11.5 | 62 | 5 | 4 | . 542.12931 | 205 | 14.3 | 56 | 5 | 5 | . 628.00000 | 205 | 14.9 | 66 | 5 | 6 | . 아래의 값을 살펴본 결과 결측치가 중앙값으로 잘 대치 되었음을 확인하였다. | . median(airquality$Solar.R,na.rm=T) . 205 k최근접 이웃 알고리즘을 이용하여 na값을 대치해보기 | . apply(knnImputation(air_before,k=3),2,function(x) sum(is.na(x))) . &lt;dl class=dl-inline&gt;Ozone0Solar.R0Wind0Temp0Month0Day0&lt;/dl&gt;",
            "url": "https://gangcheol.github.io/data-mining/2022/05/24/%EA%B2%B0%EC%B8%A1%EC%B9%98(1205).html",
            "relUrl": "/2022/05/24/%EA%B2%B0%EC%B8%A1%EC%B9%98(1205).html",
            "date": " • May 24, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "상관분석",
            "content": "$H_ 0 : $ 변수간에는 상관관계가 없다( 상관계수 $= 0$) . $H_1 : $ 변수간에는 상관관계가 있다.( 상관계수 $ neq 0$ ) . 피어슨 상관계수 두 연속형 자료가 모두 정규성을 따른다는 가정하에 선형적 상관관계를 측정 | . | . 스피어만 상관계수 데이터가 정규성을 만족하지 않거나 순위 및 순서 형태로 주어지는 경우 사용 | 피어슨 상관계수와 달리 비선형 관계의 연관성을 파악할 수 있다. | 비모수적 방법 | . | . 켄달의 순위상관계수 $X_i$가 커짐에 따라 $Y_i$도 커질 경우 부합, 작아질 경우 비부합이라고 본다. | 전체 데이터에서 비부합쌍에 대한 부합쌍의 비율로 상관계수를 산출한다. | 순위상관계수가 -1 일 경우 비부합쌍의 비율이 100%, 0일 경우 두 변수 $X,Y$는 상관성이 없음을 의미한다. | . | . $ divideontimes$ 원래의 경우 독립이면 상관계수는 0이지만, 이것에 대한 역은 반드시 성립하지 않는다. . R &#49892;&#49845; . library(tidyverse) . data(&quot;airquality&quot;) . air &lt;- airquality %&gt;% select(-c(Day,Month)) . air_cor &lt;- cor(air,use=&quot;pairwise.complete.obs&quot;,method=&quot;pearson&quot;) . use everything : 결측값 존재 시 NA출력 | all.obs : 결측값 존재 시 오류 메시지 출력 | complete.obs : 변수별로 결측값을 제외하고 상관계수 계산 | pairwise.complete.obs : 모든 변수 쌍에서 결측값이 없는 데이터들에 대해 상관계수 계산 | . | . library(corrplot) . testRes &lt;- cor.mtest(air,method=&quot;pearson&quot;) . options(repr.plot.res=200,repr.plot.height=5,repr.plot.width=10) corrplot(air_cor,diag=F,type=&quot;lower&quot;,p.mat=testRes$p, method=&quot;circle&quot;,number.cex=1.5,addCoef.col=&quot;black&quot;) . 위 그래프를 해석하면 Wind와 Solar.R간에는 상관관계가 없다고 해석할 수 있다. 즉 독립인다고 할 수 있다. | . cor.test(air$Wind,air$Solar.R) ##실제 검정 결과도 동일하다. . Pearson&#39;s product-moment correlation data: air$Wind and air$Solar.R t = -0.6826, df = 144, p-value = 0.496 alternative hypothesis: true correlation is not equal to 0 95 percent confidence interval: -0.2172359 0.1066406 sample estimates: cor -0.05679167 .",
            "url": "https://gangcheol.github.io/data-mining/2022/05/24/%EC%83%81%EA%B4%80%EB%B6%84%EC%84%9D.html",
            "relUrl": "/2022/05/24/%EC%83%81%EA%B4%80%EB%B6%84%EC%84%9D.html",
            "date": " • May 24, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "(4주차) 과제",
            "content": "1&#48264; . 설명변수가 1개($X$)이고, 반응변수가 1개($Y$)인데이터를 가지고 있다고 하자. $(n = 100)$ 그리고 다음의 두 모형(linear regression, cubic regression)을 적합시키려고 한다. . $$Y = beta_{0}+ beta_{1}X + varepsilon quad quad quad quad quad quad quad quad (1)$$ . $$Y = beta_{0}+ beta_{1}X + beta_{2}X^2+ beta_{3}X^3+ varepsilon quad quad (2)$$ . (a) . 실제 $X,Y$가 선형(linear)관계가 있다고 가정 하자. 모델 (1),(2)의 $SSE$(잔차제곱합)의 크기를 비교할 수 있는지 설명하여라. . Solution . 비교할 수 있다. train sse의 경우 과적합된 cubic regreesion이 낮은 train sse를 보일 것이다. 그러나 선형관계라는 가정이 존재하기 때문에 test sse는 linear regression 이 더 낮은 수치를 보일 것이다. | . (b) . 실제 $X, Y$ 가 비선형(non-linear)관계가 있다고 가정 하자. 대신 실제 모형에 대한 정보는 없다. 모델 (1),(2)의 $SSE$(잔차제곱합)의 크기를 비교할 수 있는지 설명하여라. . Solution . 비교할 수 없다. (a) 번의 경우 두 변수는 선형관계라는 모형 정보가 존재했다. 그러나 (b)번의 경우 모형에 대한 정보가 없기 때문에 test 데이터에 대한 sse로 모형을 비교할 수 없다. | . . 2&#48264; . ’Auto.csv’ 데이터를 이용하여 단순선형 회귀 모형을 적합한다. . (자료형 변환 후 결측치 제거) . library(tidyverse) data &lt;- read_csv(&quot;Auto(1).csv&quot;) data$horsepower &lt;- as.numeric(data$horsepower) glimpse(data) . -- Attaching packages - tidyverse 1.3.1 -- v ggplot2 3.3.5 v purrr 0.3.4 v tibble 3.1.6 v dplyr 1.0.8 v tidyr 1.2.0 v stringr 1.4.0 v readr 2.1.2 v forcats 0.5.1 -- Conflicts - tidyverse_conflicts() -- x dplyr::filter() masks stats::filter() x dplyr::lag() masks stats::lag() . Error: &#39;Auto(1).csv&#39; does not exist in current working directory (&#39;C:/Users/rkdcj/데이터마이닝특강&#39;). Traceback: 1. read_csv(&#34;Auto(1).csv&#34;) 2. vroom::vroom(file, delim = &#34;,&#34;, col_names = col_names, col_types = col_types, . col_select = { . { . col_select . } . }, id = id, .name_repair = name_repair, skip = skip, n_max = n_max, . na = na, quote = quote, comment = comment, skip_empty_rows = skip_empty_rows, . trim_ws = trim_ws, escape_double = TRUE, escape_backslash = FALSE, . locale = locale, guess_max = guess_max, show_col_types = show_col_types, . progress = progress, altrep = lazy, num_threads = num_threads) 3. vroom_(file, delim = delim %||% col_types$delim, col_names = col_names, . col_types = col_types, id = id, skip = skip, col_select = col_select, . name_repair = .name_repair, na = na, quote = quote, trim_ws = trim_ws, . escape_double = escape_double, escape_backslash = escape_backslash, . comment = comment, skip_empty_rows = skip_empty_rows, locale = locale, . guess_max = guess_max, n_max = n_max, altrep = vroom_altrep(altrep), . num_threads = num_threads, progress = progress) 4. (function (path, write = FALSE) . { . if (is.raw(path)) { . return(rawConnection(path, &#34;rb&#34;)) . } . if (!is.character(path)) { . return(path) . } . if (is_url(path)) { . if (requireNamespace(&#34;curl&#34;, quietly = TRUE)) { . con &lt;- curl::curl(path) . } . else { . rlang::inform(&#34;`curl` package not installed, falling back to using `url()`&#34;) . con &lt;- url(path) . } . ext &lt;- tolower(tools::file_ext(path)) . return(switch(ext, zip = , bz2 = , xz = { . close(con) . stop(&#34;Reading from remote `&#34;, ext, &#34;` compressed files is not supported, n&#34;, . &#34; download the files locally first.&#34;, call. = FALSE) . }, gz = gzcon(con), con)) . } . p &lt;- split_path_ext(basename(path)) . if (write) { . path &lt;- normalizePath(path, mustWork = FALSE) . } . else { . path &lt;- check_path(path) . } . if (rlang::is_installed(&#34;archive&#34;)) { . formats &lt;- archive_formats(p$extension) . extension &lt;- p$extension . while (is.null(formats) &amp;&amp; nzchar(extension)) { . extension &lt;- split_path_ext(extension)$extension . formats &lt;- archive_formats(extension) . } . if (!is.null(formats)) { . p$extension &lt;- extension . if (write) { . if (is.null(formats[[1]])) { . return(archive::file_write(path, filter = formats[[2]])) . } . return(archive::archive_write(path, p$path, format = formats[[1]], . filter = formats[[2]])) . } . if (is.null(formats[[1]])) { . return(archive::file_read(path, filter = formats[[2]])) . } . return(archive::archive_read(path, format = formats[[1]], . filter = formats[[2]])) . } . } . if (!write) { . compression &lt;- detect_compression(path) . } . else { . compression &lt;- NA . } . if (is.na(compression)) { . compression &lt;- tools::file_ext(path) . } . if (write &amp;&amp; compression == &#34;zip&#34;) { . stop(&#34;Can only read from, not write to, .zip&#34;, call. = FALSE) . } . switch(compression, gz = gzfile(path, &#34;&#34;), bz2 = bzfile(path, . &#34;&#34;), xz = xzfile(path, &#34;&#34;), zip = zipfile(path, &#34;&#34;), . if (!has_trailing_newline(path)) { . file(path) . } else { . path . }) . })(&#34;Auto(1).csv&#34;) 5. check_path(path) 6. stop(&#34;&#39;&#34;, path, &#34;&#39; does not exist&#34;, if (!is_absolute_path(path)) { . paste0(&#34; in current working directory (&#39;&#34;, getwd(), &#34;&#39;)&#34;) . }, &#34;.&#34;, call. = FALSE) . summary(data) . mpg cylinders displacement horsepower weight Min. : 9.00 Min. :3.000 Min. : 68.0 Min. : 46.0 Min. :1613 1st Qu.:17.50 1st Qu.:4.000 1st Qu.:104.0 1st Qu.: 75.0 1st Qu.:2223 Median :23.00 Median :4.000 Median :146.0 Median : 93.5 Median :2800 Mean :23.52 Mean :5.458 Mean :193.5 Mean :104.5 Mean :2970 3rd Qu.:29.00 3rd Qu.:8.000 3rd Qu.:262.0 3rd Qu.:126.0 3rd Qu.:3609 Max. :46.60 Max. :8.000 Max. :455.0 Max. :230.0 Max. :5140 NA&#39;s :5 acceleration year origin name Min. : 8.00 Min. :70.00 Min. :1.000 Length:397 1st Qu.:13.80 1st Qu.:73.00 1st Qu.:1.000 Class :character Median :15.50 Median :76.00 Median :1.000 Mode :character Mean :15.56 Mean :75.99 Mean :1.574 3rd Qu.:17.10 3rd Qu.:79.00 3rd Qu.:2.000 Max. :24.80 Max. :82.00 Max. :3.000 . data &lt;- na.omit(data) . (a) . 반응변수 mpg, 설명변수는 horsepower로 하는 단순선형회귀모형을 적합 시킨 후 summary() 함수의 결과 확인하고 다음의 물음에 답하여라. . fit1 &lt;- lm(mpg~horsepower,data) summary(fit1) . Call: lm(formula = mpg ~ horsepower, data = data) Residuals: Min 1Q Median 3Q Max -13.5710 -3.2592 -0.3435 2.7630 16.9240 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 39.935861 0.717499 55.66 &lt;2e-16 *** horsepower -0.157845 0.006446 -24.49 &lt;2e-16 *** Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 4.906 on 390 degrees of freedom Multiple R-squared: 0.6059, Adjusted R-squared: 0.6049 F-statistic: 599.7 on 1 and 390 DF, p-value: &lt; 2.2e-16 . (i) . 두 변수 사이에 관계가 있는가? . Solution . t 통계량에 근거한 p-value 값을 살펴본 결과 두 변수는 통계적으로 유의미한 선형관계에 있다 . (ii) . 두 변수 사이의 관계는 얼마나 강한가? . Solution . summary(fit1) . Call: lm(formula = mpg ~ horsepower, data = data) Residuals: Min 1Q Median 3Q Max -13.5710 -3.2592 -0.3435 2.7630 16.9240 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 39.935861 0.717499 55.66 &lt;2e-16 *** horsepower -0.157845 0.006446 -24.49 &lt;2e-16 *** Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 4.906 on 390 degrees of freedom Multiple R-squared: 0.6059, Adjusted R-squared: 0.6049 F-statistic: 599.7 on 1 and 390 DF, p-value: &lt; 2.2e-16 . horsepower 변수가 1씩 증가할 때 mpg 변수는 -0.1575 만큼 감소한다. . (iii) . 두 변수는 음의 관계가 있는가? 양의 관계가 있는가? . Solution . 추정된 $ beta_1$을 보았을 때 음의 관계이다. . (iv) . horsepower의 값이 98일 때, mpg의 예측값은 무엇인가 95% 신뢰구간은 무엇인가? . Solution . test &lt;- data.frame(horsepower=c(98)) predict(fit1,test,interval = &quot;confidence&quot;) . A matrix: 1 × 3 of type dbl fitlwrupr . 124.46708 | 23.97308 | 24.96108 | . (b) . 설명변수와 반응변수의 산점도를 그리고, 회귀직선을 추가하여라. (abline() 사용) . Solution . fit1$coefficients . . &lt;dl class=dl-inline&gt;(Intercept)39.9358610211705horsepower-0.157844733353654&lt;/dl&gt; options(repr.plot.res=150,repr.plot.width=10) plot(data$horsepower,data$mpg,xlab=&quot;horsepower&quot;,ylab=&quot;mpg&quot;,main = &quot;plot with abline&quot;) abline(a = fit1$coefficients[1],b=fit1$coefficients[2],col=&quot;red&quot;,lwd=2) . . . 3&#48264; . 이 문제는 다중공선성(collinearity)에 관련한 것이다. . (a) . R . set.seed(1) x1 = runif(100) x2 = 0.5*x1 + rnorm(100)/10 y = 2 + 2*x1+0.3*x2 + rnorm(100) . 마지막 줄이 두개의 설명변수를 이용한 중회귀모형이다. 회귀모형을 쓰시오. ($ beta$ 등을 이용하여) . Solution . set.seed(1) x1 = runif(100) x2 = 0.5*x1 + rnorm(100)/10 y = 2 + 2*x1+0.3*x2 + rnorm(100) . . $$y= beta_1 x_1 + beta_2 x_2 + varepsilon, quad varepsilon sim N(0, sigma^2)$$ . (b) . 두 설명변수 $x_1$과 $x_2$ 사이에 상관관계(correlation)이 있는가? 산점도를 그려서 확인하여라 . Solution . options(repr.plot.res=200) plot(x1,x2,main = &quot;x1, x2 correlation&quot;) abline(a=-0.1,b=1,col=&quot;red&quot;) . . 산점도를 그려본 결과 $x_1,x_2$의 분포가 직선 형태의 가까운 형태이다. 따라서 두 변수 사이에 강한 상관성이 있어보인다. . (c) . 생성된 데이터를 이용하여 (a) 모형의 회귀계수를 추정하여라. 실제 회귀계수와 추정된 회귀계수와 비교하여라. $H_0 : beta_1 = 0$을 기각할 수 있는가? $H_1 : beta_2 = 0$을 기각할 수 있는가? . Solution . fit2 &lt;- lm(y~x1+x2) summary(fit2) . . Call: lm(formula = y ~ x1 + x2) Residuals: Min 1Q Median 3Q Max -2.8311 -0.7273 -0.0537 0.6338 2.3359 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 2.1305 0.2319 9.188 7.61e-15 *** x1 1.4396 0.7212 1.996 0.0487 * x2 1.0097 1.1337 0.891 0.3754 Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 1.056 on 97 degrees of freedom Multiple R-squared: 0.2088, Adjusted R-squared: 0.1925 F-statistic: 12.8 on 2 and 97 DF, p-value: 1.164e-05 . t 통계량에 근거한 p-value 값을 보았을 때 $H_0 : beta_1 = 0$ 이라는 기각가능하나, $H_0 : beta_2 = 0$ 기각하지 못한다 . (d) . 이번에는 $x_1$만을 이용한 단순선형회귀 모형을 적합하여라. 결과를 분석하여라. $H_0 : beta_1 = 0$을 기각할 수 있는가 . Solution . fit3 &lt;- lm(y~x1) summary(fit3) . . Call: lm(formula = y ~ x1) Residuals: Min 1Q Median 3Q Max -2.89495 -0.66874 -0.07785 0.59221 2.45560 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 2.1124 0.2307 9.155 8.27e-15 *** x1 1.9759 0.3963 4.986 2.66e-06 *** Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 1.055 on 98 degrees of freedom Multiple R-squared: 0.2024, Adjusted R-squared: 0.1942 F-statistic: 24.86 on 1 and 98 DF, p-value: 2.661e-06 . 기각 가능하다. . (e) . 이번에는 $x_2$만을 이용한 단순선형회귀 모형을 적합하여라. 결과를 분석하여라. $H_0 : beta_2 = 0$을 기각할 수 있는가? . Solution . fit4 &lt;- lm(y~x2) summary(fit4) . . Call: lm(formula = y ~ x2) Residuals: Min 1Q Median 3Q Max -2.62687 -0.75156 -0.03598 0.72383 2.44890 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 2.3899 0.1949 12.26 &lt; 2e-16 *** x2 2.8996 0.6330 4.58 1.37e-05 *** Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 1.072 on 98 degrees of freedom Multiple R-squared: 0.1763, Adjusted R-squared: 0.1679 F-statistic: 20.98 on 1 and 98 DF, p-value: 1.366e-05 . 기각 가능하다 . (f) . (c)-(e)의 결과가 서로 모순되는가? 설명하여라. . Solution . 결론 : 모순이 아니다 . 현재 $x_1,x_2$를 독립변수로 $y$를 반응변수로 하여 적합한 중회귀모형 모델은 $ beta_1 neq0$, $ beta_2=0$이다. . 그러나 $x_1,x_2$ 각각의 경우를 $y$변수에 적합한 결과 $ beta_i neq 0, quad i= {1,2 }$를 보였다. . 현재 $x_2= 0.5 times x_1 + varepsilon$의 형태이다. . 즉 $x_2$와 $x_1$을 이미 선형관계를 전제했기 때문에 두 변수를 이용하여 $y$변수에 적합시킬 경우 다중공선성의 문제로 인하여 위와 같은 현상이 발생한다. 따라서 이는 모순이 아닌 합당한 결과이다. $x_1,x_2$는 선형의 관계이므로 주성분 분석을 이용하여 하나의 변수로 통합시킬 수 있다. . (g) . 새로운 데이터가 관측되었다고 하자.(이 데이터는 잘못 측정된 것이다.) . R . x1 &lt;- c(x1,0.1) x2 &lt;- c(x2,0.8) ㅛ &lt;- c(y,6) . 추가된 데이터를 이용하여 (c)-(e)를 다시 적합하여라. 결과가 어떻게 달라졌는가? 각 모형에서 새로 운 데이터는 이상점인가?(잔차가 기존에 있는 데이터에 비해 많이 큰가?) 아니면 영향점인가?(추가된 데이터로 인해 회귀계수의 값이 많이 바뀌었는가?) 설명하여라. . Solution . x1 &lt;- c(x1,0.1) x2 &lt;- c(x2,0.8) y &lt;- c(y,6) . . f1 &lt;- lm(y~x1+x2) f2 &lt;- lm(y~x1) f3 &lt;- lm(y~x2) par(mfrow=c(3,2)) plot(fit2,1,main = &quot;추가전 y ~ x1+x2&quot;) plot(f1,1,main = &quot;추가후 y ~ x1+x2&quot;) plot(fit3,1,main = &quot;추가전 y ~ x1&quot;) plot(f2,1,main = &quot;추가후 y ~ x1&quot;) plot(fit4,1,main = &quot;추가전 y ~ x2&quot;) plot(f3,1,main = &quot;추가후 y ~ x2&quot;) . . 해설 1 : 데이터 추가 후 잔차를 살펴본 결과 이상치로 판단되지 않는다. | . 해설 2 : 데이터 추가 후 의 변화를 살펴본 결과 의 경우 데이터 추가 후 , 의 감소량이 눈에 띈다. 따라서 추가된 데이터는 영향치로 판단된다. | . Exercises for Logistic Regression . 1&#48264; . 두개의 설명변수 (X1 = 공부시간, X2 = 학부평점)를 이용하여 A학점을 받을 확률을 예측하기 위해 로지스틱 회귀모형을 적합하였다. 추정된 회귀계수는 $ beta_0 = −6, , beta_1 = 0.05, , beta_2 = 1$이다. . (a) . 40시간 공부하고, 평점이 3.5인 학생이 A를 받았을 확률을 예측하여라. . Solution . $$P(X) = frac {e^{ beta_0+ beta_1x_1+ beta_2 x_2}}{1+e^{ beta_0+ beta_1 x_1 + beta_2 x_2}}$$ . $$ therefore quad P(X | x_1 = 40, x_2 = 3.5) = 0.377$$ . (b) . 평점이 3.5인 학생은 얼마나 공부를 해야 A를 받을 확률이 50%를 넘을 것인가? . Solution . x1 &lt;- 40:100 x2 &lt;- 3.5 P_x &lt;- (exp(-6+0.05*x1 + x2))/(1+exp(-6+0.05*x1 + x2)) d &lt;- tibble(x1,P_x) %&gt;% mutate(label = ifelse(P_x&gt;0.5,&quot;A&quot;,&quot;not A&quot;)) d %&gt;% ggplot(aes(x=x1,y=P_x,color=label)) + geom_label(aes(label= x1)) + ggtitle(&quot;공부시간에 따른 학점변화&quot;) + theme( plot.title = element_text(family = &quot;serif&quot;, face = &quot;bold&quot;, hjust = 0.5, size = 20, color = &quot;darkblue&quot;), axis.text.x=element_text(size=15), axis.text.y=element_text(size=15), axis.title.x = element_text(size=18, hjust=0.5,color=&quot;darkblue&quot;, family = &quot;serif&quot;,face = &quot;bold&quot;), axis.title.y = element_text(size=18, hjust=0.5,color=&quot;darkblue&quot;, family = &quot;serif&quot;,face = &quot;bold&quot;), ) . . 2&#48264; . 다음은 odds에 관한 문제이다. . (a) . 신용카드결재 문제에서 결재를 하지 못하는 경우(default)에 대한 odds가 0.37인 사람들이 실제로 defalut할 확률은 평균적으로 얼마인가? . Solution . $$Odds = frac{p}{1-p} to E(Y=default| X)=p = frac {Odds}{1+Odds}$$ . $$p = frac{0.37}{1+0.37}= 0.270073$$ . (b) . 어떤 개인이 default할 확률이 16% 라고 하자. 그 사람이 default할 odds는 얼마인가? . Solution . $$Odds = frac {0.16}{1-0.16} = 0.1904$$ .",
            "url": "https://gangcheol.github.io/data-mining/2022/03/30/(4%EC%A3%BC%EC%B0%A8)-%EA%B3%BC%EC%A0%9C.html",
            "relUrl": "/2022/03/30/(4%EC%A3%BC%EC%B0%A8)-%EA%B3%BC%EC%A0%9C.html",
            "date": " • Mar 30, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "(1주차) 선형회귀분석",
            "content": "&#49440;&#54805;&#54924;&#44480;&#48516;&#49437; &#44592;&#52488; . 변수들간의 인과관계를 밝히고 모형을 적합하여 관심 있는 변수를 예측하거나 추론하기 위해 사용하는 분석기법 | . 선형회귀분석의 가정 오차의 등분산성 | 오차의 독립성 | 오차의 정규성 : Q-Q plot, Kolmogorov-Smirnov 검정, Shapiro-Wilk 검정을 확인하여 정규성을 확인한다. | . | . &#54924;&#44480;&#48516;&#49437; &#49884; &#44160;&#53664;&#49324;&#54637; . 0. 회귀모형이 통계적으로 유의한가 확인 . 1. 모형 내의 개별 회귀계수에 대한 검정 . 2. 모형에 설명력 $R^2$값을 통해 확인, 독립변수의 수가 많아지면 $adj-R^2$ 값을 확인 . 3. 잔차 plot을 통해 모형의 진단 . 4. 다중공선성의 확인 (10이상이면 다중공선성이 존재한다고 판단.) $ to$ car 패키지의 vif 함수 이용 . 5. 잔차분석 . R&#49892;&#49845; - &#45800;&#49692;&#49440;&#54805;&#54924;&#44480;&#48516;&#49437; . Cars93 데이터의 엔진크기(EngineSize)를 독립변수, 가격(Price)를 종속변수로 선정하여 단순 선형회귀분석을 실시한 후, 추정된 회귀모형에 대해 해석해보자. . library(MASS) library(lmtest) ## 더비왓슨 테스트를 위함 library(tidyverse) select &lt;- dplyr::select . . fit1 &lt;- lm(Price~EngineSize,data=Cars93) summary(fit1) . . Call: lm(formula = Price ~ EngineSize, data = Cars93) Residuals: Min 1Q Median 3Q Max -13.684 -4.627 -1.795 2.592 39.429 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 4.6692 2.2390 2.085 0.0398 * EngineSize 5.5629 0.7828 7.107 2.59e-10 *** Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 7.789 on 91 degrees of freedom Multiple R-squared: 0.3569, Adjusted R-squared: 0.3499 F-statistic: 50.51 on 1 and 91 DF, p-value: 2.588e-10 . plot(Cars93$EngineSize,Cars93$Price,lwd=2) abline(a=coefficients(fit1)[2],b=coefficients(fit1)[1],col=&quot;red&quot;,lwd=2) . . par(mfrow=c(1,2)) plot(fit1,1); plot(fit1,2) . . shapiro.test(resid(fit1)) . . Shapiro-Wilk normality test data: resid(fit1) W = 0.85365, p-value = 3.886e-08 . dwtest(fit1,alternative=&quot;two.sided&quot;) . . Durbin-Watson test data: fit1 DW = 1.1716, p-value = 2.236e-05 alternative hypothesis: true autocorrelation is not 0 . 1. 모형과 추정된 회귀계수는 모두 통계적으로 유의하다. . 2. 결정계수값과 수정된 결정계수 값이 각각 0.3569, 0.3499 로 산출되었다. . 3. F-통계량의 근거한 p-value값을 보아도 생성된 모델은 통계적으로 유의하다. . 4. 잔차 plot 을 그려본 결과 오차항의 정규성과 독립성 가정이 위배된 것 같다. . * 실제로 test 결과 위배되었다는 결론이 통계적으로 유의미했다. . 5. 따라서 모형의 식별 단계로 돌아가 새로운 모형을 적합할 필요가 있어보인다. . test &lt;- Cars93 %&gt;% select(EngineSize) %&gt;% sample_n(5) . . predict(fit1,test,interval=&quot;none&quot;) ##점추정 . . &lt;dl class=dl-inline&gt;123.0268912710567216.9076569678407324.1394793261868425.8083614088821523.5831852986217&lt;/dl&gt; predict(fit1,test,interval=&quot;confidence&quot;) # 회귀계수에 대한 신뢰구간을 고려한 구간 predict(fit1,test,interval=&quot;prediction&quot;) # 회귀계수에 대한 신뢰구간과 오차항을 고려한 구간 . . A matrix: 5 × 3 of type dbl fitlwrupr . 123.02689 | 21.14536 | 24.90842 | . 216.90766 | 15.14623 | 18.66909 | . 324.13948 | 22.07834 | 26.20061 | . 425.80836 | 23.42653 | 28.19019 | . 523.58319 | 21.61595 | 25.55043 | . A matrix: 5 × 3 of type dbl fitlwrupr . 123.02689 | 7.441846 | 38.61194 | . 216.90766 | 1.336654 | 32.47866 | . 324.13948 | 8.531732 | 39.74723 | . 425.80836 | 10.155035 | 41.46169 | . 523.58319 | 7.987560 | 39.17881 | . R&#49892;&#49845; - &#51473;&#54924;&#44480;&#48516;&#49437; . iris 데이터를 사용 | . R에 lm함수는 범주형 변수를 자동으로 더미변수로 변환해줌 | . fit2 &lt;- lm(Petal.Length~.,data=iris) summary(fit2) . . Call: lm(formula = Petal.Length ~ ., data = iris) Residuals: Min 1Q Median 3Q Max -0.78396 -0.15708 0.00193 0.14730 0.65418 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) -1.11099 0.26987 -4.117 6.45e-05 *** Sepal.Length 0.60801 0.05024 12.101 &lt; 2e-16 *** Sepal.Width -0.18052 0.08036 -2.246 0.0262 * Petal.Width 0.60222 0.12144 4.959 1.97e-06 *** Speciesversicolor 1.46337 0.17345 8.437 3.14e-14 *** Speciesvirginica 1.97422 0.24480 8.065 2.60e-13 *** Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 0.2627 on 144 degrees of freedom Multiple R-squared: 0.9786, Adjusted R-squared: 0.9778 F-statistic: 1317 on 5 and 144 DF, p-value: &lt; 2.2e-16 . dwtest(fit2,alternative=&quot;two.sided&quot;) . . Durbin-Watson test data: fit2 DW = 1.6772, p-value = 0.03042 alternative hypothesis: true autocorrelation is not 0 . shapiro.test(resid(fit2)) . . Shapiro-Wilk normality test data: resid(fit2) W = 0.99389, p-value = 0.78 . library(car) vif(fit2) . . A matrix: 4 × 3 of type dbl GVIFDfGVIF^(1/(2*Df)) . Sepal.Length 3.736705 | 1 | 1.933056 | . Sepal.Width 2.648127 | 1 | 1.627307 | . Petal.Width18.496973 | 1 | 4.300811 | . Species28.551416 | 2 | 2.311569 | . &#52572;&#51201;&#54924;&#44480;&#48169;&#51221;&#49885;&#51032; &#49440;&#53469; . &#44032;. &#45800;&#44228;&#51201; &#48320;&#49688;&#49440;&#53469;(Stepwise Variable Selection) . 1. 전진 선택법 (forward selection) : 절편만 있는 상수모형에서 시작하여 중요하다고 생각되는 설명변수부터 차례로 추가한다. . 2. 후진 제거법 (backward elimination) : 모든 독립변수를 포함한 모형에서 출발하여 종속변수에 가장 적은 영향을 주는 변수부터 하나씩 제거하면서 더 이상 제거할 변수가 없을 때의 모형을 선택한다. . 3. 단계적 방법 (stepwise method) : 전진선택법에 의해 변수를 추가하면서 새롭게 추가된 변수에 의해 기존 변수의 중요도가 약화되면 해당변수를 제거한다. . &#45208;. &#48268;&#51216;&#54868;&#46108; &#49440;&#53469;&#44592;&#51456; . 모형의 복잡도에 따라 벌점을 주는 방식으로 $AIC, BIC$ 값이 주로 사용된다. | . R&#49892;&#49845; : &#45796;&#51473;&#54924;&#44480;&#47784;&#54805; + &#48320;&#49688;&#49440;&#53469;&#48277; . fit3 &lt;- step(lm(Price~ EngineSize +Horsepower +RPM + Width + Length + Weight,Cars93),direction = &quot;both&quot;) summary(fit3) . . Start: AIC=322.11 Price ~ EngineSize + Horsepower + RPM + Width + Length + Weight Df Sum of Sq RSS AIC - EngineSize 1 1.69 2556.1 320.17 - RPM 1 19.71 2574.1 320.82 &lt;none&gt; 2554.4 322.11 - Length 1 119.55 2674.0 324.36 - Weight 1 209.73 2764.2 327.45 - Width 1 585.01 3139.4 339.29 - Horsepower 1 720.84 3275.3 343.22 Step: AIC=320.17 Price ~ Horsepower + RPM + Width + Length + Weight Df Sum of Sq RSS AIC - RPM 1 49.36 2605.5 319.95 &lt;none&gt; 2556.1 320.17 + EngineSize 1 1.69 2554.4 322.11 - Length 1 140.92 2697.0 323.16 - Weight 1 208.09 2764.2 325.45 - Width 1 593.56 3149.7 337.59 - Horsepower 1 1476.65 4032.8 360.57 Step: AIC=319.95 Price ~ Horsepower + Width + Length + Weight Df Sum of Sq RSS AIC &lt;none&gt; 2605.5 319.95 + RPM 1 49.36 2556.1 320.17 + EngineSize 1 31.34 2574.1 320.82 - Length 1 132.02 2737.5 322.54 - Weight 1 279.31 2884.8 327.42 - Width 1 562.10 3167.6 336.12 - Horsepower 1 1898.74 4504.2 368.86 . Call: lm(formula = Price ~ Horsepower + Width + Length + Weight, data = Cars93) Residuals: Min 1Q Median 3Q Max -14.956 -2.578 -0.182 2.114 28.448 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 53.005861 16.532269 3.206 0.00188 ** Horsepower 0.129653 0.016190 8.008 4.46e-12 *** Width -1.480623 0.339813 -4.357 3.56e-05 *** Length 0.152968 0.072440 2.112 0.03755 * Weight 0.007339 0.002389 3.071 0.00283 ** Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 5.441 on 88 degrees of freedom Multiple R-squared: 0.6965, Adjusted R-squared: 0.6827 F-statistic: 50.48 on 4 and 88 DF, p-value: &lt; 2.2e-16 .",
            "url": "https://gangcheol.github.io/data-mining/r/jupyter/2022/03/03/(1%EC%A3%BC%EC%B0%A8)-%EC%84%A0%ED%98%95%ED%9A%8C%EA%B7%80%EB%B6%84%EC%84%9D.html",
            "relUrl": "/r/jupyter/2022/03/03/(1%EC%A3%BC%EC%B0%A8)-%EC%84%A0%ED%98%95%ED%9A%8C%EA%B7%80%EB%B6%84%EC%84%9D.html",
            "date": " • Mar 3, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://gangcheol.github.io/data-mining/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Github . github . Soundcloud . C.I.C . NLP . NLP . Data Mining . Data Mining . Bigdata Analysis . Bigdata Analysis .",
          "url": "https://gangcheol.github.io/data-mining/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://gangcheol.github.io/data-mining/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}